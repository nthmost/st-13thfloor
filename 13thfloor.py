import streamlit as st
import st_state_patch
import wastedspace

#     * st.State
#     * st.SessionState
#     * st.GlobalState

#def make_slider(label):
#    return st.slider(label, min_value=1, max_value=4, value=2)

SECTION_ORDER = [wastedspace.AGREE,
                 wastedspace.IDEAS,
                 wastedspace.SENSES,
                 wastedspace.RULES,
                ]

s = st.State()

if not s:
    s.name = None
    s.group = False
    s.agree = None
    s.senses = None
    s.ideas = None
    s.rules = None


st.title("Stem Soul Compatibility Test")
st.header("Welcome to the 13th Floor. You're just in time.")

s.name = st.text_input("Your Wasted Name")
#s.group = st.text_input("Number of entities you are?")
s.group = st.checkbox("Check here if you are more than 1 entity.", value=s.group)


def write_section_get_result(section):
    st.markdown("## <font size=48>{symbol}</font> {ask}".format(**section), unsafe_allow_html=True)
    inp = st.radio("Choose one", ["({}) {}".format(choice, desc) for choice, desc in section["opts"].items()])
    return int(inp[1])


# 1. AGREEABLENESS / Antimony
s.agree = write_section_get_result(wastedspace.AGREE)

# 2. IDEAS / Mercury
s.ideas = write_section_get_result(wastedspace.IDEAS)

# 3. SENSATIONS / Sulphur
s.senses = write_section_get_result(wastedspace.SENSES)

# 4. RULES / Salt
s.rules = write_section_get_result(wastedspace.RULES)

# ----------------

# Stem Soul Code generated by user's choices

# RESULTS section

@st.cache
def construct_displaycode(code):
    tmpl = "<font size=16>{}</font> {}\t"

    outp = ""
    for x in range(0, 4):
        outp += tmpl.format(SECTION_ORDER[x]['symbol'], code[x])
    return outp

code = f"{s.agree}{s.ideas}{s.senses}{s.rules}"
displaycode = construct_displaycode(code)

st.markdown(f"""### For official use only:  {displaycode}""", unsafe_allow_html=True)
    

# SIDEBAR where you can see possible results
st.sidebar.markdown("## Results: %s" % displaycode, unsafe_allow_html=True)


@st.cache
def upper_match(code, group):
    creatures = wastedspace.SOLO_CREATURES
    if group:
        creatures = wastedspace.GROUP_CREATURES
        
    while code < 4444:
        code += 1
        if creatures.get(code):
            return creatures[code]

@st.cache
def lower_match(code, group):
    creatures = wastedspace.SOLO_CREATURES
    if group:
        creatures = wastedspace.GROUP_CREATURES

    while code > 1111:
        code = code - 1
        if creatures.get(code):
            return creatures[code]

@st.cache
def is_match(code, group):
    creatures = wastedspace.SOLO_CREATURES
    if group:
        creatures = wastedspace.GROUP_CREATURES
    if creatures.get(code):
        return creatures[code]
    return None


if s.name:
    if not s.group:
        st.sidebar.markdown(f"best Stem Soul pairing for entity known as <font color=green>{s.name}</font>...", 
            unsafe_allow_html=True)
    else:
        st.sidebar.markdown(f"best Stem Soul pairing for the collective known as <font color=green>{s.name}</font>...",
            unsafe_allow_html=True)

    soul1 = None
    soul2 = None

    try:
        code = int(code)
    except: 
        # we're not ready to display any results yet
        pass

    if len(str(code)) == 4:
        if is_match(code, s.group):
            st.sidebar.header("It's a perfect match!")
            soul1 = is_match(code, s.group)
            
        else:
            soul1 = upper_match(code, s.group)
            soul2 = lower_match(code, s.group)


    if soul1:
        st.sidebar.header(soul1["name"])
        st.sidebar.markdown(soul1["desc"])

    if soul2:
        st.sidebar.header(soul2["name"])
        st.sidebar.markdown(soul2["desc"])

